{"version":3,"sources":["../../src/scss/mixins/_grid-overlay.scss","../../src/scss/free-format/partials/_variables.scss","../../src/scss/mixins/_columns.scss","free-format.css","../../src/scss/mixins/_baseline.scss","../../src/scss/partials/_baseline-grid.scss","../../src/scss/partials/_image.scss","../../src/scss/theme-interior/_base.scss","../../src/scss/partials/_variables.scss","../../src/scss/free-format/partials/_typography.scss","../../src/scss/functions/_vertical-rhythm.scss","../../src/scss/free-format/partials/_layout.scss","../../src/scss/mixins/_layout.scss","../../src/scss/functions/_units.scss"],"names":[],"mappings":"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","file":"free-format.css","sourcesContent":["// -----------------------------------------------------------------------------\n// Mixin — grid-overlay()\n// -----------------------------------------------------------------------------\n// This is what creates the overlay used to align columns for use with Interior.\n// -----------------------------------------------------------------------------\n\n@mixin grid-overlay(\n  $width: $grid-overlay-width,\n  $max-width: $grid-overlay-width,\n  $centred: false,\n  $right: false,\n  $grid-overlay-container: $grid-gutter/2,\n  $grid-overlay-gutter: $grid-gutter,\n  $break-point: true,\n  $overlay-map: $overlay-breakpoints,\n  $parent: null\n) {\n  .grid-overlay {\n    display: none;\n    max-width: $max-width;\n    width: 100%;\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    z-index: 2;\n    // When the screen is bigger than the width of the grid, center using calc()\n    @if $centred == true {\n      @media(min-width: $max-width) {\n       left: calc(50% - #{$max-width/2});\n      }\n    } @else if $right == true {\n      right: 0\n    } @else {\n      left: 0\n    }\n    // Iterate through the break-points sass-map.\n    @include auto-columns(\n      $map: $breakpoints,\n      $container: true\n    );\n    // Allow nested content so the parent class scopes the CSS.\n    @content;\n  }\n  #{$parent} .grid-overlay > div {\n    @include auto-columns(\n      $map: $overlay-map\n    );\n  }\n}\n","// -----------------------------------------------------------------------------\n// Variables\n// -----------------------------------------------------------------------------\n\n//** Columns\n//\n// Number of columns\n$max-columns: 12 !default;\n\n// Typographic scale: https://gist.github.com/morganfeeney/0dc92d8368787a4a260fb8c002dfeb8d\n//\n// Deprecated, use variables from theme-interior.\n$canon: font-scale(3) !default; // 48px\n$double-great-primer: font-scale(2.250) !default; // 36px\n$four-line-brevier: font-scale(2) !default; // 32px\n$two-line-pica: font-scale(1.5) !default; // 24px\n$double-pica: font-scale(1.313) !default; // 21px\n$great-primer: font-scale(1.125) !default; // 18px\n$english: font-scale(.875) !default; // 14px\n$pica: font-scale(.75) !default; // 12px\n\n$light-gray: lightgray;\n$brand-color-1: $light-gray;\n$brand-color-light: lighten($brand-color-1, 15);\n$wrapper-width-large: 100rem;\n$hero-image-offset-top: 25rem;\n$link-color: #000;\n\n$gutter-smaller: $grid-gutter/2 !default;\n$gutter-small: $grid-gutter/2 !default;\n$gutter-medium: $grid-gutter/2 !default;\n$gutter-large: $grid-gutter/2 !default;\n\n//** Screens\n//\n// Screen widths (min-width)\n$screen-smaller: 400px !default;\n$screen-small: 569px !default;\n$screen-medium: 700px !default;\n$screen-large: 900px !default;\n$screen-larger: 1200px !default;\n$screen-largest: 1400px !default;\n$screen-whopper: 2000px !default;\n\n// Screen widths (max-width)\n$screen-small-max: ($screen-small)-1 !default;\n$screen-medium-max: ($screen-medium)-1 !default;\n$screen-large-max: ($screen-large)-1 !default;\n$screen-larger-max: ($screen-larger)-1 !default;\n$screen-largest-max: ($screen-largest)-1 !default;\n$screen-whopper-max: ($screen-whopper)-1 !default;\n\n// Container gutters\n$container-gutter: 5rem !default;\n\n$container-gutter: 6rem;\n\n$container-gutter-small: $container-gutter/2 !default;\n$container-gutter-smaller: $container-gutter-small/2 !default;\n\n//** Wrappers\n$wrapper-width-large: $screen-larger !default;\n$grid-overlay-width: $wrapper-width-large !default;\n\n// Breakpoints\n$breakpoints-map: (\n  small: (\n    gutter: $gutter-smaller,\n    container-gutter: 3rem,\n    breakpoint: false,\n    margin: true\n  ),\n  large: (\n    gutter: $gutter-large,\n    container-gutter: 10rem,\n    breakpoint: $screen-large,\n    margin: true\n  )\n)!default;\n$breakpoints: map-values($breakpoints-map)!default;\n\n$breakpoints-mm-map: (\n  smaller: (\n    gutter: $gutter-smaller,\n    container-gutter: $container-gutter-smaller,\n    columns: 4,\n    breakpoint: false,\n    margin: true\n  ),\n  small: (\n    gutter: $gutter-small,\n    container-gutter: $container-gutter-smaller,\n    breakpoint: $screen-small\n  ),\n  medium: (\n    gutter: f$gutter-small,\n    container-gutter: $container-gutter-small,\n    breakpoint: $screen-medium\n  ),\n  large: (\n    gutter: font-scale(2.5),\n    container-gutter: $container-gutter,\n    breakpoint: $screen-large,\n    margin: true\n  )\n)!default;\n$breakpoints-mm: map-values($breakpoints-mm-map)!default;\n\n$overlay-breakpoints-map: (\n  smaller: (\n    gutter: $gutter-smaller,\n    container-gutter: $container-gutter-smaller,\n    breakpoint: false,\n    columns: 4,\n    margin: true\n  ),\n  small: (\n    gutter: $gutter-small,\n    container-gutter: $container-gutter-smaller,\n    breakpoint: $screen-small,\n    columns: 2\n  ),\n  medium: (\n    gutter: $gutter-small,\n    container-gutter: $gutter-medium,\n    breakpoint: $screen-medium\n  ),\n  large: (\n    gutter: $gutter-small,\n    container-gutter: $container-gutter,\n    breakpoint: $screen-large\n  )\n)!default;\n$overlay-breakpoints: map-values($overlay-breakpoints-map)!default;\n","// -----------------------------------------------------------------------------\n// Mixin — columns\n// -----------------------------------------------------------------------------\n// These mixins create the columns for use with Interior. A plethora of\n// arguments are available to configure them.\n// -----------------------------------------------------------------------------\n\n// column-generator() - allows bespoke, individual columns to be created where needed.\n// As many possibilites as I can currently imagine have been catered for.\n\n@mixin column-generator(\n  $margin: null,\n  $padding: null,\n  $columns: null,\n  $max-columns: $max-columns,\n  $calc: null,\n  $gutter: null,\n  $breakpoint: null,\n  $margin-left: $gutter/2,\n  $margin-right: $gutter/2,\n  $padding-left: $gutter/2,\n  $padding-right: $gutter/2,\n  $offset-right: false,\n  $offset-left: false,\n  $offset: null,\n  $offset-calc: calc(#{(column-width($offset))} + #{$gutter/2}),\n  $custom-margin: false,\n  $custom-width: false\n) {\n  // See if margin is required.\n  @if $margin == true {\n    // See if an offset is also required...\n    @if $offset-right == true {\n      margin-right: $offset-calc;\n      margin-left: $gutter/2;\n    }\n    @else if $offset-left == true {\n      margin-left: $offset-calc;\n      margin-right: $gutter/2;\n    }\n    @else {\n      // ...if not then use gutters or/and margin-left and/or margin-right.\n      @if $margin-left == null and $margin-right == null {\n        margin-left: $gutter/2;\n        margin-right: $gutter/2;\n      }\n      @else if $margin-left == null {\n        margin-left: $gutter/2;\n        margin-right: $margin-right;\n      }\n      @else if $margin-right == null {\n        margin-left: $margin-left;\n        margin-right: $gutter/2;\n      }\n      @else if $margin-left and $margin-right {\n        margin-left: $margin-left;\n        margin-right: $margin-right;\n      }\n      // ...otherwise use the standard gutters.\n      @else {\n        margin-left: $gutter/2;\n        margin-right: $gutter/2;\n      }\n    }\n  }\n\n  // If margin == 0 then output a 0 value.\n  @else if $margin == 0 {\n    margin-left: 0;\n    margin-right: 0;\n  }\n  // If auto is passed in as a value then set the value to auto.\n  @else if $margin == auto {\n    margin-left: auto;\n    margin-right: auto;\n  }\n  // Otherwise no margin rules should be output whatsoever.\n  @else if $margin == null {}\n\n  // See if padding is required.\n  @if $padding == true {\n    // If so set the default padding based upon the gutter variable value.\n    padding-left: $gutter/2;\n    padding-right: $gutter/2;\n  }\n  // If padding == 0 then output a 0 value.\n  @else if $padding == 0 {\n    padding-left: 0;\n    padding-right: 0;\n  }\n  // Otherwise no padding rules should be output whatsoever.\n  @else if $padding == null {}\n\n  // See if a column width has not been passed in. If not then output nothing.\n  @if $columns == null {}\n  // Otherwise if $calc is false create a column width without calc().\n  @else if $calc == false {\n    width: column-width($columns, $max-columns);\n  }\n  // Otherwise create a column width with calc() to subtract the gutter width.\n  @else {\n    width: calc(#{column-width($columns, $max-columns)} - #{$gutter});\n  }\n}\n\n// auto-columns() - works by allowing a map to be passed in. The map stores all\n// of the data needed to generate a range of columns & gutters with or without\n// media queries. The variety comes from maps. It's intended for batches of\n// styles that can be shared, or just for convenience.\n\n@mixin auto-columns($map, $container: false){\n  @each $var in $map {\n    // Scoped variables for use with @each.\n    $gutter: map-get($var, gutter);\n    $container-gutter: map-get($var, container-gutter);\n    $breakpoint: map-get($var, breakpoint);\n    $columns: map-get($var, columns);\n    $container-columns: map-get($var, container-columns);\n    $margin: map-get($var, margin);\n    // Check if the column is not a container, check no breakpoints are required, then generate columns.\n    @if $container == false {\n      @if $breakpoint == false {\n        @include column-generator(\n          $gutter: $gutter,\n          $columns: $columns,\n          $calc: true,\n          $margin: $margin\n        )\n      }\n      @else {\n        // We want a breakpoint here > Generate columns nested in a media query.\n        @media(min-width: $breakpoint) {\n          @include column-generator(\n            $gutter: $gutter,\n            $columns: $columns,\n            $calc: true,\n            $margin: $margin\n          )\n        }\n      }\n    }\n    // If this is a container, check no breakpoints are required, then generate columns.\n    @else {\n      @if $breakpoint == false {\n        @include column-generator(\n          $gutter: $container-gutter,\n          $columns: $container-columns,\n          $calc: false,\n          $margin: false,\n          $padding: true\n        )\n      }\n      // Otherwise generate columns nested in a media query.\n      @else {\n        @media(min-width: $breakpoint) {\n          @include column-generator(\n            $gutter: $container-gutter,\n            $columns: $container-columns,\n            $calc: false,\n            $margin: false,\n            $padding: true\n          )\n        }\n      }\n    }\n  }\n}\n\n// column() - nests columns in media queries where required. All of the config\n// for each column comes from column-generator();\n\n@mixin column(\n  $columns: null,\n  $max-columns: $max-columns,\n  $gutter: $grid-gutter,\n  $breakpoint: false,\n  $calc: true,\n  $margin: true,\n  $padding: false,\n  $margin-left: null,\n  $margin-right: null,\n  $offset-left: false,\n  $offset-right: false,\n  $offset: null\n) {\n  // Check no breakpoints are required > Generate columns.\n  @if $breakpoint == false {\n    @include column-generator(\n      $columns: $columns,\n      $max-columns: $max-columns,\n      $gutter: $gutter,\n      $calc: $calc,\n      $margin: $margin,\n      $margin-left: $margin-left,\n      $margin-right: $margin-right,\n      $padding: $padding,\n      $offset-left: $offset-left,\n      $offset-right: $offset-right,\n      $offset: $offset\n    )\n    // Add scoped content.\n    @content;\n  }\n  // Otherwise generate columns nested in a media query.\n  @else if $breakpoint {\n    @media(min-width: $breakpoint) {\n      @include column-generator(\n        $columns: $columns,\n        $max-columns: $max-columns,\n        $gutter: $gutter,\n        $calc: $calc,\n        $margin: $margin,\n        $margin-left: $margin-left,\n        $margin-right: $margin-right,\n        $padding: $padding,\n        $offset-left: $offset-left,\n        $offset-right: $offset-right,\n        $offset: $offset\n      )\n      // Add scoped content.\n      @content;\n    }\n  }\n}\n\n// For Description lists only!\n@mixin dl-column(\n  $col,\n  $column-width: column-width($columns),\n  $min: false\n) {\n  @if $min == true {\n    min-width: #{$column-width};\n  }\n  @else {\n    width: #{$column-width};\n  }\n}\n",".grid-overlay {\n  display: none;\n  max-width: 100rem;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100vh;\n  z-index: 2;\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n\n@media (min-width: 100rem) {\n  .grid-overlay {\n    left: calc(50% - 50rem);\n  }\n}\n\n@media (min-width: 1332px) {\n  .grid-overlay {\n    padding-left: 5rem;\n    padding-right: 5rem;\n  }\n}\n\n.grid-overlay > div {\n  margin-left: 0.5rem;\n  margin-right: 0.5rem;\n  width: calc(33.3333333% - 1rem);\n}\n\n@media (min-width: 648px) {\n  .grid-overlay > div {\n    width: calc(16.6666667% - 1rem);\n  }\n}\n\nhtml {\n  position: relative;\n}\n\n.baseline-grid::before {\n  content: \"\";\n  width: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 2;\n  mix-blend-mode: multiply;\n  background: linear-gradient(red 0, transparent 1px) 0 0/100vw 1rem repeat-y, linear-gradient(rgba(255, 0, 0, 0.5) 0, transparent 1px) 0 0.5rem/100vw 0.5rem repeat-y;\n  pointer-events: none;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n\n.container > img {\n  align-self: center;\n  padding-top: 0.16rem;\n  margin-top: 2rem;\n  margin-bottom: 0.84rem;\n}\n\n.item > img {\n  align-self: center;\n}\n\np + img {\n  padding-top: 0.56rem;\n  margin-top: 0rem;\n  margin-bottom: 0.84rem;\n}\n\n.image-box svg {\n  max-width: 100%;\n}\n\nhtml {\n  box-sizing: border-box;\n  min-height: 100%;\n}\n\n*, *::before, *::after {\n  box-sizing: inherit;\n  margin: 0;\n}\n\nbody {\n  line-height: 1rem;\n  font-size: 1rem;\n  -webkit-text-size-adjust: 100%;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n\nhtml,\nbody,\nfigure {\n  margin: 0;\n  padding: 0;\n}\n\na, a:link, a:focus, a:hover {\n  color: #000;\n}\n\n.hidden {\n  display: none;\n}\n\nh1 {\n  font-size: 2.25rem;\n  line-height: 1;\n  padding-top: 0.36rem;\n  margin-top: 0rem;\n  margin-bottom: 0.89rem;\n  text-transform: capitalize;\n  font-style: italic;\n}\n\n@media (min-width: 978px) {\n  h1 {\n    margin-left: 1rem;\n  }\n}\n\nh2, h3, h4 {\n  font-size: 1rem;\n  line-height: 1.5;\n  padding-top: 0.41rem;\n  margin-top: 0rem;\n  margin-bottom: -0.41rem;\n}\n\nh4 {\n  font-style: italic;\n}\n\np {\n  font-size: 0.875rem;\n  line-height: 1.75;\n  padding-top: 0.44rem;\n  margin-top: 0rem;\n  margin-bottom: 0.56rem;\n}\n\nimg {\n  padding-top: 0.16rem;\n  margin-top: 0rem;\n  margin-bottom: 0.84rem;\n}\n\n.page-crack-magazine-1 aside > h2 {\n  font-size: 1rem;\n  line-height: 1;\n  padding-top: 0.66rem;\n  margin-top: 0rem;\n  margin-bottom: 0.84rem;\n}\n\n.container {\n  margin-left: 1.5rem;\n  margin-right: 1.5rem;\n}\n\n@media (min-width: 656px) {\n  .container {\n    margin-left: 2.444rem;\n  }\n}\n\n@media (min-width: 1366px) {\n  .container {\n    margin-left: 3.556rem;\n  }\n}\n\n.grid {\n  display: flex;\n  flex-flow: row wrap;\n  margin-left: 0;\n  margin-right: 0;\n}\n\n.grid-main {\n  justify-content: space-between;\n}\n\n.page-crack-magazine-1 .main-header::before {\n  content: none;\n}\n\n.page-crack-magazine-1 .main-article .container {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n}\n\n.page-crack-magazine-1 aside {\n  width: 100%;\n  font-size: 1rem;\n  line-height: 1;\n  padding-top: 0.16rem;\n  margin-top: 0.34rem;\n  margin-bottom: 0.84rem;\n}\n\n@media (min-width: 978px) {\n  .page-crack-magazine-1 aside {\n    font-size: 1rem;\n    line-height: 1;\n    padding-top: 0.16rem;\n    margin-top: 12.34rem;\n    margin-bottom: 0.84rem;\n    margin-left: 1rem;\n    margin-right: 1rem;\n    width: calc(16.6666667% - 2rem);\n  }\n}\n\n.page-crack-magazine-1 .layout-contents {\n  display: flex;\n  flex-flow: row wrap;\n}\n\n@media (min-width: 978px) {\n  .page-crack-magazine-1 .layout-contents {\n    margin-left: auto;\n    margin-right: auto;\n    width: calc(75% - 2rem);\n  }\n}\n\n.page-crack-magazine-1 .layout-contents .item {\n  padding-top: 1.16rem;\n  margin-top: 0rem;\n  margin-bottom: 1.84rem;\n  display: flex;\n  flex-flow: row wrap;\n  margin-left: -1rem;\n  margin-right: -1rem;\n  position: relative;\n}\n\n@media (min-width: 978px) {\n  .page-crack-magazine-1 .layout-contents .item {\n    display: flex;\n    flex-flow: row wrap;\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n\n.page-crack-magazine-1 .layout-contents .item::before {\n  content: \"\";\n  border-top: 1px solid #555;\n  margin-left: 1rem;\n  margin-right: 1rem;\n  width: calc(100% - 2rem);\n  position: absolute;\n  top: 0;\n}\n\n.layout-contents .item:nth-child(1) {\n  align-items: flex-end;\n  padding-top: 0.5rem;\n  margin-top: 0rem;\n  margin-bottom: 0.5rem;\n}\n\n@media (min-width: 978px) {\n  .layout-contents .item:nth-child(1) {\n    padding-top: 0.5rem;\n    margin-top: 12rem;\n    margin-bottom: 0.5rem;\n  }\n}\n\n.layout-contents .item:nth-child(1)::before {\n  content: none;\n}\n\n@media (max-width: 977px) {\n  .layout-contents .item:nth-child(1) > img {\n    flex: 1 1 100%;\n  }\n}\n\n@media (min-width: 978px) {\n  .layout-contents .item:nth-child(1) > img {\n    margin-left: 1rem;\n    margin-right: 1rem;\n    width: calc(58.3333333% - 2rem);\n    order: 2;\n    position: absolute;\n    right: 0;\n    bottom: 0;\n  }\n  @supports (object-fit: cover) {\n    .layout-contents .item:nth-child(1) > img {\n      height: 25rem;\n      object-fit: cover;\n    }\n  }\n}\n\n.layout-contents .item:nth-child(1) > div {\n  margin-left: 1rem;\n  margin-right: 1rem;\n  width: calc(100% - 2rem);\n}\n\n@media (min-width: 978px) {\n  .layout-contents .item:nth-child(1) > div {\n    margin-left: 1rem;\n    margin-right: 1rem;\n    width: calc(41.6666667% - 2rem);\n  }\n}\n\n.layout-contents .item:nth-child(2),\n.layout-contents .item:nth-child(4) {\n  justify-content: space-between;\n}\n\n.layout-contents .item:nth-child(2) > div,\n.layout-contents .item:nth-child(4) > div {\n  margin-left: 1rem;\n  margin-right: 1rem;\n  width: calc(100% - 2rem);\n}\n\n@media (min-width: 978px) {\n  .layout-contents .item:nth-child(2) > div,\n  .layout-contents .item:nth-child(4) > div {\n    margin-left: 1rem;\n    margin-right: 1rem;\n    width: calc(33.3333333% - 2rem);\n  }\n}\n\n.layout-contents .item:nth-child(2) {\n  padding-top: 0.5rem;\n  margin-top: 0rem;\n  margin-bottom: 0.5rem;\n}\n\n@media (min-width: 978px) {\n  .layout-contents .item:nth-child(2) {\n    padding-top: 7.5rem;\n    margin-top: 0rem;\n    margin-bottom: 3.5rem;\n  }\n}\n\n.layout-contents .item:nth-child(3) {\n  padding-top: 1.5rem;\n  margin-top: 0rem;\n  margin-bottom: 2rem;\n}\n\n@media (min-width: 978px) {\n  .layout-contents .item:nth-child(3) {\n    width: 66.6666667%;\n    margin-left: auto;\n    align-items: center;\n  }\n}\n\n.layout-contents .item:nth-child(3) > div {\n  margin-left: auto;\n  margin-right: 1rem;\n  width: calc(50% - 2rem);\n}\n\n.layout-contents .item:nth-child(3) > img {\n  margin-left: 1rem;\n  margin-right: 1rem;\n  width: calc(50% - 2rem);\n}\n\n.layout-contents .item:nth-child(4) {\n  padding-top: 1.5rem;\n  margin-top: 0rem;\n  margin-bottom: 2.5rem;\n}\n\n.layout-contents .item:nth-child(4)::before {\n  content: none;\n}\n\n.layout-contents .item:nth-child(5) {\n  padding-top: 1.5rem;\n  margin-top: 0rem;\n  margin-bottom: 0.84rem;\n}\n\n@media (min-width: 978px) {\n  .layout-contents .item:nth-child(5) {\n    width: 66.6666667%;\n    margin-right: auto;\n    align-items: flex-start;\n  }\n}\n\n.layout-contents .item:nth-child(5) > img {\n  margin-left: auto;\n  margin-right: 1rem;\n  width: calc(50% - 2rem);\n  order: 1;\n}\n\n.layout-contents .item:nth-child(5) > div {\n  margin-left: 1rem;\n  margin-right: 1rem;\n  width: calc(50% - 2rem);\n}\n\n/*# sourceMappingURL=free-format.css.map */","// -----------------------------------------------------------------------------\n// Mixin — Baseline\n// -----------------------------------------------------------------------------\n@mixin baseline(\n  $font-size: $font-base,\n  $font-weight: false,\n  $font-style: false,\n  $text-transform: false,\n  $unit: 1,\n  $line-height: ($line-height-base * $unit),\n  $margin: 0,\n  $above: 0,\n  $below: 0,\n  $top: ((cap-height($font-size))+($above*$base-line-unit)),\n  $padding-top: $top,\n  $padding-bottom: null,\n  $margin-bottom: (($base-line-unit - $top)+($below*$base-line-unit)),\n  $margin-top: ($margin * $base-line-unit),\n  $margin-only: false,\n  $no-text: false\n) {\n  @if $no-text == false {\n    font-size: $font-size;\n    line-height: $line-height;\n  }\n  @if $font-weight != false {\n    font-weight: $font-weight;\n  }\n  @if $font-style != false {\n    font-style: $font-style;\n  }\n  @if $text-transform != false {\n    text-transform: $text-transform;\n  }\n  @if $margin-only != false {\n    $margin-top: $top;\n  }\n  padding-top: $padding-top;\n  padding-bottom: $padding-bottom;\n  margin-top: $margin-top;\n  margin-bottom: $margin-bottom;\n}\n\n@mixin baseline-grid(\n  $grid-color: $grid-color,\n  $grid-bg: $grid-bg,\n  $grid-bg-size: $grid-bg-size\n) {\n  @at-root {\n    html {\n      position: relative;\n    }\n  }\n  &::before {\n      content: \"\";\n      width: 100%;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      z-index: 2;\n      mix-blend-mode: multiply;\n      background:\n        linear-gradient($grid-color 0, transparent 1px) 0 0 / 100vw 1rem repeat-y,\n        linear-gradient(rgba($grid-color, 0.5) 0, transparent 1px) 0 0.5rem / 100vw 0.5rem repeat-y;\n      pointer-events: none;\n    }\n}\n","// -----------------------------------------------------------------------------\n// Baseline grid\n// -----------------------------------------------------------------------------\n\n.baseline-grid {\n  @include baseline-grid();\n}\n","// -----------------------------------------------------------------------------\n// Image\n// -----------------------------------------------------------------------------\n\n%fluid-img {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n\nimg {\n  @extend %fluid-img;\n}\n\n.container > img {\n  align-self: center;\n  @include baseline(\n    $font-size: $font-base,\n    $no-text: true,\n    $margin: 2\n  );\n}\n\n.item > img {\n  align-self: center;\n}\n\np + img {\n  @include baseline(\n    $no-text: true,\n    $above: .4,\n    $below: .4\n  );\n}\n\n.image-box svg {\n  max-width: 100%;\n}\n","// -----------------------------------------------------------------------------\n// Base\n// -----------------------------------------------------------------------------\n\n// Reset\nhtml {\n box-sizing: border-box;\n // Allow the baseline grid overlay to fill the viewport height.\n min-height: 100%;\n}\n\n*, *::before, *::after {\n box-sizing: inherit;\n margin: 0;\n}\n\n// Baseline grid\nbody {\n  line-height: $font-base;\n  font-size: $font-base;\n  -webkit-text-size-adjust: 100%;\n  font-family: $font-family-base;\n}\n\nhtml,\nbody,\nfigure {\n  margin: 0;\n  padding: 0;\n}\n\na {\n  &,\n  &:link,\n  &:focus,\n  &:hover {\n    color: $link-color;\n  }\n}\n\n.hidden {\n  display: none;\n}\n","// -----------------------------------------------------------------------------\n// Variables\n// -----------------------------------------------------------------------------\n\n//** Fonts\n//\n// Default font units, required for functions amongst other things.\n$font-base: 1rem !default;\n$line-height-base: 1 !default;\n$base-line-unit: $font-base*$line-height-base !default;\n$helvetica-cap-height: 0.68 !default\n$serif-cap-height: 0.66 !default\n$cap-height: $helvetica-cap-height !default;\n$font-size-body: $font-base !default;\n\n// Font weights\n$font-weight-border-with-content: bold !default\n\n// Font families\n$font-system: -apple-system, BlinkMacSystemFont, \"Roboto\", \"Droid Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n$font-sans-serif: \"Helvetica Neue\", Helvetica, Arial, sans-serif !default;\n$font-serif: serif, georgia !default;\n$font-monospace: \"Inconsolata\", monospace, courier !default;\n\n// Apply font families to generic variables\n$font-family-base: $font-sans-serif !default;\n$font-family-headings: $font-system !default;\n$font-family-inline-code: $font-monospace !default;\n\n$light-border: 1px solid #555 !default;\n\n//** Grid\n$grid-color: red !default;\n$grid-bg: transparent !default;\n$grid-bg-size: 100vw .5rem !default;\n\n//** Spacing\n//\n// Default spacing units\n$vertical-space: font-scale(3) !default;\n$horizontal-space: font-scale(2) !default;\n$vertical-space-small: $vertical-space / 4 !default;\n$horizontal-space-small: $horizontal-space / 2 !default;\n$m: $horizontal-space !default;\n\n// Grid gaps\n$grid-row-gap-1: 1rem !default;\n$grid-row-gap-2: 2rem !default;\n\n$grid-column-gap-1: 2rem !default;\n$grid-column-gap-2: 3rem !default;\n\n$grid-gap-1: $grid-row-gap-1 $grid-column-gap-1 !default;\n$grid-gap-2: $grid-row-gap-2 $grid-column-gap-2 !default;\n\n// Grid rows\n$grid-row-base: 24rem !default;\n$grid-row-1: (($grid-row-base - $grid-row-gap-1) / 2) !default;\n$grid-row-2: $grid-row-base !default;\n\n// Gutters\n$grid-gutter: $horizontal-space !default;\n\n//** Images\n//\n// Image sizes\n$main-image-height-1: (($grid-row-1 * 3) + ($grid-row-gap-1 * 2));\n$main-image-height-2: (($grid-row-2 * 2) + ($grid-row-gap-2 ));\n\n//** Widths\n//\n// Layout widths (min-width)\n$width-small: 600px !default;\n$width-medium: 912px !default;\n$width-large: 1260px !default;\n$width-larger: 1584px !default;\n\n//** Screens - widths plus margin\n//\n// Screen widths (min-width)\n$screen-smallest: 400px !default;\n$screen-smaller: 540px !default;\n$screen-small: 648px !default;\n$screen-medium: 978px !default;\n$screen-large: 1332px !default;\n$screen-larger: 1656px !default;\n\n// Screen widths (max-width)\n$screen-smaller-max: ($screen-smaller)-1 !default;\n$screen-small-max: ($screen-small)-1 !default;\n$screen-medium-max: ($screen-medium)-1 !default;\n$screen-large-max: ($screen-large)-1 !default;\n$screen-larger-max: ($screen-larger)-1 !default;\n","// -----------------------------------------------------------------------------\n// Typography\n// -----------------------------------------------------------------------------\n\n// body {\n//  @include baseline-grid();\n// }\n\nh1 {\n  @include baseline(\n    $font-size: $double-great-primer,\n    $below: .25\n  );\n  text-transform: capitalize;\n  font-style: italic;\n  @media(min-width: $screen-medium) {\n    margin-left: $horizontal-space-small;\n  }\n}\n\nh2, h3, h4 {\n  @include baseline(\n    $below: -1,\n    $line-height: 1.5,\n    $above: .25\n  );\n}\n\nh4 {\n  font-style: italic;\n}\n\np {\n  @include baseline(\n    $font-size: $english,\n    $line-height: 1.75,\n    $above: 0.3\n  );\n}\n\nimg {\n  @include baseline($no-text: true);\n}\n\n.page-crack-magazine-1 aside > h2 {\n  @include baseline(\n    $above: .5,\n    $below: .5\n  );\n}\n","// -----------------------------------------------------------------------------\n// Function — Vertical Rhythm\n// -----------------------------------------------------------------------------\n\n// Calculate the unit of line-height, as opposed to the unitless value - useful for other caclulations.\n@function line-height($ratio, $font-size: $font-base, $line-height: $line-height-base) {\n  @return $font-size * $line-height * $ratio;\n}\n\n// Calculate vertical space for the rhythm based on cap height and other variables\n@function cap-height($font-size, $line-height: $line-height-base, $cap-height: $cap-height) {\n  @return $font-size * ($line-height - $cap-height) / 2;\n}\n\n// This is for creating scalable font sizes based upon variables\n@function font-scale($scale, $font-size: $font-base) {\n  @return $font-size * $scale;\n}\n","// -----------------------------------------------------------------------------\n// Layout\n// -----------------------------------------------------------------------------\n\n%flex-container {\n  display: flex;\n  flex-flow: row wrap;\n}\n\n.container {\n  margin-left: 1.5rem;\n  margin-right: 1.5rem;\n  @media(min-width: 656px) {\n      margin-left: 2.444rem;\n    }\n    @media(min-width: 1366px) {\n      margin-left: 3.556rem;\n    }\n}\n\n.grid {\n  @include grid($gutter: 0);\n}\n\n.grid-main {\n  justify-content: space-between;\n}\n\n.page-crack-magazine-1 .main-header::before {\n  content: none;\n}\n\n.page-crack-magazine-1 .main-article .container {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n}\n\n.page-crack-magazine-1 {\n  aside {\n    @include column(\n      $columns: 12,\n      $calc: false,\n      $margin: false\n    );\n    @include baseline($margin: .34);\n    @media(min-width: $screen-medium) {\n      @include baseline($margin: 12.34);\n      @include column(2);\n    }\n  }\n  .layout-contents {\n    display: flex;\n    flex-flow: row wrap;\n    @media(min-width: $screen-medium) {\n      @include column(\n        $columns: 9,\n        $margin: auto\n      );\n    }\n    .item {\n      @include baseline(\n        $above: 1,\n        $below: 2,\n        $no-text: true\n      );\n      @include grid($gutter: -1rem);\n      @media(min-width: $screen-medium) {\n        @include grid($gutter: 0);\n      }\n      position: relative;\n      &::before {\n        content: \"\";\n        border-top: $light-border;\n        @include column(12);\n        position: absolute;\n        top: 0\n      }\n    }\n  }\n}\n\n.layout-contents .item:nth-child(1) {\n  align-items: flex-end;\n  @include baseline(\n    $no-text: true,\n    $above: .34\n  );\n  @media(min-width: $screen-medium) {\n    @include baseline(\n      $margin: 12,\n      $no-text: true,\n      $above: .34\n    );\n  }\n  &::before {\n    content: none;\n  }\n  > img {\n    @media(max-width: $screen-medium-max) {\n      flex: 1 1 100%;\n    }\n    @media(min-width: $screen-medium) {\n      @include column(7);\n      @supports(object-fit: cover){\n        height: $hero-image-offset-top;\n        object-fit: cover;\n      }\n      order: 2;\n      position: absolute;\n      right: 0;\n      bottom: 0;\n    }\n  }\n  > div {\n    @include column(12);\n    @media(min-width: $screen-medium) {\n      @include column(5);\n    }\n  }\n}\n\n.layout-contents {\n  .item:nth-child(2),\n  .item:nth-child(4) {\n    justify-content: space-between;\n    > div {\n      @include column(12);\n      @media(min-width: $screen-medium) {\n        @include column(4);\n      }\n    }\n  }\n}\n\n.layout-contents .item:nth-child(2) {\n  @include baseline(\n    $no-text: true,\n    $above: .34\n  );\n  @media(min-width: $screen-medium) {\n    @include baseline(\n      $no-text: true,\n      $above: 7.34,\n      $below: 10\n    );\n  }\n}\n\n.layout-contents .item:nth-child(3) {\n  @include baseline(\n    $no-text: true,\n    $above: 1.34,\n    $below: 2.5\n  );\n  @media(min-width: $screen-medium) {\n    @include column(\n      $columns: 8,\n      $calc: false,\n      $margin: false\n    );\n    margin-left: auto;\n    align-items: center;\n  }\n  > div {\n    @include column(\n      $columns: 6,\n      $margin-left: auto\n    );\n  }\n  > img {\n    @include column(6);\n  }\n}\n\n.layout-contents .item:nth-child(4) {\n  @include baseline(\n    $no-text: true,\n    $above: 1.34,\n    $below: 3\n  );\n  &::before {\n    content: none;\n  }\n}\n\n.layout-contents .item:nth-child(5) {\n  @include baseline(\n    $no-text: true,\n    $above: 1.34,\n    $below: 1.34\n  );\n  @media(min-width: $screen-medium) {\n    @include column(\n      $columns: 8,\n      $calc: false,\n      $margin: false\n    );\n    margin-right: auto;\n    align-items: flex-start;\n  }\n  > img {\n    @include column(\n      $columns: 6,\n      $margin-left: auto\n    );\n    order: 1;\n  }\n  > div {\n    @include column(6);\n  }\n}\n","// -----------------------------------------------------------------------------\n// Layout\n// -----------------------------------------------------------------------------\n\n@mixin grid($gutter: -$horizontal-space-small) {\n  display: flex;\n  flex-flow: row wrap;\n  margin-left: $gutter;\n  margin-right: $gutter;\n}\n","// -----------------------------------------------------------------------------\n// Function — Units\n// -----------------------------------------------------------------------------\n\n// column-width() - Generates column widths based on a bit of mathematics.\n//\n// Note to self: all arguments are scoped to this function yet can be changed.\n// The variable `$columns` may be used elsewhere, however the scope will change.\n//\n// `$columns` is positional therefore always required.\n// `$max-columns` is optional, the intended use is for sub grids where the\n// number of `$max-columns` must be different from the parent so as to align.\n\n@function column-width($columns, $max-columns: $max-columns) {\n  @if $columns == null or false {\n    @return false;\n  }\n  @return (100% / $max-columns * $columns);\n}\n"]}