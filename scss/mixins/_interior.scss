// TO DO --> Create a feature which allows the use of inline-block OR float, or flex (if easy enough).

@mixin interior(
	// The variables below are assigned values in: variables.scss.
	// They can be overridden by passing variable arguments to the @mixin.
	$grid-gutter-width: $grid-gutter-width,
	$grid-outer: ($grid-gutter-width / 2),
	$grid-cols: $grid-cols,
	$align: $align,
	$vert-space: $vert-space,
	$push: false,
	$push-cols: $grid-cols,
	$flip: false,
	$flip-cols: $grid-cols,
	$mq: null
) {
	// Wrap them all up in `.i-outer`
	.i-outer {
		padding: $grid-outer;
		// Clear all the things
		clear: both;
	}
	.i-row {
		padding: $vert-space;
		&:first-of-type {
			padding-top: 0;
		}
		&:last-of-type {
			padding-bottom: 0;
		}
	}
	// Get the number of columns from the variable.
	$columns: $grid-cols;
	// Check to see if $mq is defined, if it is then interpolate the $mq variable name into the class.
	// Loop through a sequence of $column numbers, interpolating their value into the class e.g. `i-col-xs-1`.
	@for $column from 1 through $columns {
		@if $mq != null {
			.i-#{$mq}-#{$column} {
		   		width: 100% / $grid-cols * $column;
			}
		// If $mq is not defined then fall back to just including the column number into the class.
		} @else {
			.i-col-#{$column} {
		   		width: 100% / $grid-cols * $column;
			}
		}
	}
	// This is set to true by default, to turn off set to false in @mixin.
	@if $push == true {
		@for $push-col from 1 through $push-cols {
			@if $mq != null {
				.i-#{$mq}-o-#{$push-col} {
			   		margin-left: 100% / $grid-cols * $push-col;
				}
			} @else {
				.i-o-#{$push-col} {
			   		margin-left: 100% / $grid-cols * $push-col;
				}
			}
		}		
	}
	// This is set to true by default, to turn off set to false in @mixin.
	@if $flip == true {
		@for $flip-col from 1 through $flip-cols {
			@if $mq != null {
				.i-#{$mq}-f {
					&l-#{$flip-col} {
				   		left: 100% / $grid-cols * $flip-col;
					}
					&r-#{$flip-col} {
				   		right: 100% / $grid-cols * $flip-col;
					}
				}
			} @else {
				.i-f {
					&l-#{$flip-col} {
				   		left: 100% / $grid-cols * $flip-col;
					}
					&r-#{$flip-col} {
				   		right: 100% / $grid-cols * $flip-col;
					}
				}
			}
		}
	}
	@if $mq != null {
		[class*=i-#{$mq}] {
			padding: ($grid-gutter-width / 2);
			min-height: $col-min-height;
			position: relative;
			&.i-g {
				padding: $col-group-padding;
			}
			// if $align == left, right or center: display accordingly
			@include gridAlignment($align);
		}
	} @else {
		[class*=i-col] {
			padding: ($grid-gutter-width / 2);
			min-height: $col-min-height;
			position: relative;
			&.i-g {
				padding: $col-group-padding;
			}
			// if $align == left, right or center: display accordingly
			@include gridAlignment($align);
		}
	}
}